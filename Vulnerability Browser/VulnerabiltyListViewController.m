//
//  VulnerabiltyListViewController.m
//  Vulnerability Browser
//
//  Created by jquale on 10/31/14.
//  Copyright (c) 2014 Quale, Slezak. All rights reserved.
//

#import "VulnerabiltyListViewController.h"
#import <Parse/Parse.h>
#import "VulnerabilityObject.h"

@interface VulnerabiltyListViewController ()

@property NSMutableArray *vulnerabilities;
@property (weak, nonatomic) IBOutlet UITableView *tableView;
- (IBAction)sortButton:(id)sender;
@property CGFloat range;
@end

@implementation VulnerabiltyListViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.vulnerabilities = [[NSMutableArray alloc] init];
    self.range = 10.0;
   [self getVulnerabilities];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)getVulnerabilities
{
    //alerting user it could take some time as the database slows down with lots of queries
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Querying Database"
                                                    message:@"This may take a second."
                                                   delegate:nil
                                          cancelButtonTitle:@"OK"
                                          otherButtonTitles:nil];
    [alert show];

    //creating table name
    NSString *tableName = [[NSString alloc] initWithFormat: @"nvd%@", self.lookUpYear];
    PFQuery *query = [PFQuery queryWithClassName:tableName];

    query.limit = 1000;
    
    [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
        if (!error) {
            // The find succeeded.
            //NSLog(@"Successfully retrieved %d queries.", objects.count);
            // Do something with the found objects
            for (PFObject *object in objects) {
                //NSLog(@"%@", object.objectId);
                
                //creating the object
                NSString *parseVulnName = object[@"name"];
                NSString *parseVulnDate = object[@"date"];
                NSString *parseVulnScore = object[@"score"];
                NSString *parseVulnSummary = object[@"summary"];
                
                VulnerabilityObject *parseVulnerability = [[VulnerabilityObject alloc]initWithDataFromParse:parseVulnName
                                                                                            vulnDate:parseVulnDate
                                                                                           vulnScore:parseVulnScore
                                                                                         vulnSummary:parseVulnSummary];
                //adding the object to our array of vulnerabilities
                [self.vulnerabilities addObject:parseVulnerability];
                
                
            }
        }
        else
        {
            // Log details of the failure
            NSLog(@"Error: %@ %@", error, [error userInfo]);
        }
        
        //creating an array to put the objects in the tableView
        NSMutableArray *newIndexPaths = [NSMutableArray new];
        for(int i=0; i<self.vulnerabilities.count; i++)
        {
            [newIndexPaths addObject:[NSIndexPath indexPathForRow:i inSection:0]];
        }
//        NSLog(@"numberOfRowsInSection: %ld", (long)[self tableView:self.tableView numberOfRowsInSection:0]);
        [self.tableView insertRowsAtIndexPaths:newIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];
    }];
    

}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
//    NSLog(@"number of vulnerabilities: %ld",self.vulnerabilities.count);
    return self.vulnerabilities.count; //
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *vuln = [tableView dequeueReusableCellWithIdentifier:@"vuln" forIndexPath:indexPath];
    VulnerabilityObject *vulnerability = self.vulnerabilities[indexPath.row];
    vuln.detailTextLabel.lineBreakMode = NSLineBreakByWordWrapping;
    vuln.detailTextLabel.numberOfLines = 0;
    
    vuln.textLabel.text = vulnerability.vulnCveID;
    vuln.detailTextLabel.text = vulnerability.description;
    
    CGFloat colorIntensity = 1.0 - ([vulnerability.vulnScore floatValue] / self.range);
    vuln.backgroundColor = [UIColor colorWithRed:1 green:colorIntensity blue:colorIntensity alpha:1];
    
    return vuln;
}

//chaning the height of the table view cells so that all the data is visable
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //probably a dynamic way to do this but I couldn't figure it out 200 seems to fit all test runs
    return 200;
}

- (IBAction)sortButton:(id)sender {
    UIActionSheet *actionSheet;
    actionSheet = [[UIActionSheet alloc] initWithTitle:@"Sort Vulnerabilities by"
                                              delegate:self
                                     cancelButtonTitle:@"Cancel"
                                destructiveButtonTitle:nil
                                     otherButtonTitles:@"Highest Score First",
                   @"Lowest Score First",
                   //@"Date",
                   nil];
    [actionSheet showInView:self.view];
}

- (void)actionSheet:(UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    switch (buttonIndex) {
        case 0:
            [self sortByScore:NO];
            [self.tableView reloadData];
            break;
        case 1:
            [self sortByScore:YES];
            [self.tableView reloadData];
            break;
            /*case 2:
             [self sortByDate:YES];
             [self.tableView reloadData];
             break; */
        default:
            break;
    }
}

- (void)sortByScore:(BOOL)ascendingBool {
    NSComparator compareDistances = ^(id string1, id string2)
    {
        NSNumber *number1 = [NSNumber numberWithFloat:[string1 floatValue]];
        NSNumber *number2 = [NSNumber numberWithFloat:[string2 floatValue]];
        
        return [number1 compare:number2];
    };
    
    // sort list and create nearest list
    NSSortDescriptor *sortDescriptorNearest = [NSSortDescriptor sortDescriptorWithKey:@"vulnScore" ascending:ascendingBool comparator:compareDistances];
    self.vulnerabilities = (NSMutableArray *)[self.vulnerabilities sortedArrayUsingDescriptors:@[sortDescriptorNearest]];
}

/* Error: This class is not key value coding-compliant for the key publish_date
 - (void)sortByDate:(BOOL)ascendingBool {
 NSSortDescriptor *sortDescriptor;
 sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"publish_date"
 ascending:ascendingBool];
 NSMutableArray *sortDescriptors = [NSMutableArray arrayWithObject:sortDescriptor];
 self.vulnerabilities = (NSMutableArray *)[self.vulnerabilities sortedArrayUsingDescriptors:sortDescriptors];
 }
 */
@end
