//
//  VulnerabiltyListViewController.m
//  Vulnerability Browser
//
//  Created by jquale on 10/31/14.
//  Copyright (c) 2014 Quale, Slezak. All rights reserved.
//

#import "VulnerabiltyListViewController.h"
#import <Parse/Parse.h>
#import "VulnerabilityObject.h"

@interface VulnerabiltyListViewController ()

@property NSMutableArray *vulnerabilities;
@property (weak, nonatomic) IBOutlet UITableView *tableView;

@property  CGPoint* pointOnTableView;

- (void)alertUserOfSave;

@end
//bad global variable
CGPoint pointOnTableView;

@implementation VulnerabiltyListViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.vulnerabilities = [[NSMutableArray alloc] init];

   [self getVulnerabilities];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)getVulnerabilities
{
    //alerting user it could take some time as the database slows down with lots of queries
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Querying Database"
                                                    message:@"This may take a second."
                                                   delegate:nil
                                          cancelButtonTitle:@"OK"
                                          otherButtonTitles:nil];
    [alert show];

    //creating table name
    NSString *tableName = [[NSString alloc] initWithFormat: @"nvd%@", self.lookUpYear];
    PFQuery *query = [PFQuery queryWithClassName:tableName];

    query.limit = 1000;
    
    [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
        if (!error) {
            // The find succeeded.
            //NSLog(@"Successfully retrieved %d queries.", objects.count);
            // Do something with the found objects
            for (PFObject *object in objects) {
                //NSLog(@"%@", object.objectId);
                
                //creating the object
                NSString *parseVulnName = object[@"name"];
                NSString *parseVulnDate = object[@"date"];
                NSString *parseVulnScore = object[@"score"];
                NSString *parseVulnSummary = object[@"summary"];
                
                VulnerabilityObject *parseVulnerability = [[VulnerabilityObject alloc]initWithDataFromParse:parseVulnName
                                                                                            vulnDate:parseVulnDate
                                                                                           vulnScore:parseVulnScore
                                                                                         vulnSummary:parseVulnSummary];
                //adding the object to our array of vulnerabilities
                [self.vulnerabilities addObject:parseVulnerability];
                
                
            }
        }
        else
        {
            // Log details of the failure
            NSLog(@"Error: %@ %@", error, [error userInfo]);
        }
        
        //creating an array to put the objects in the tableView
        NSMutableArray *newIndexPaths = [NSMutableArray new];
        for(int i=0; i<self.vulnerabilities.count; i++)
        {
            [newIndexPaths addObject:[NSIndexPath indexPathForRow:i inSection:0]];
        }
//        NSLog(@"numberOfRowsInSection: %ld", (long)[self tableView:self.tableView numberOfRowsInSection:0]);
        [self.tableView insertRowsAtIndexPaths:newIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];
    }];
    

}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
//    NSLog(@"number of vulnerabilities: %ld",self.vulnerabilities.count);
    return self.vulnerabilities.count; //
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *vuln = [tableView dequeueReusableCellWithIdentifier:@"vuln" forIndexPath:indexPath];
    VulnerabilityObject *vulnerability = self.vulnerabilities[indexPath.row];
    vuln.detailTextLabel.lineBreakMode = NSLineBreakByWordWrapping;
    vuln.detailTextLabel.numberOfLines = 0;
    
    vuln.textLabel.text = vulnerability.vulnCveID;
    vuln.detailTextLabel.text = vulnerability.description;
    
//trying out long press
    
//    UILongPressGestureRecognizer *lpgr = [[UILongPressGestureRecognizer alloc]
//                                          initWithTarget:self action:@selector(handleLongPress:)];
//    lpgr.minimumPressDuration = 2.0; //seconds
//    lpgr.delegate = self;
//    [self.myTableView addGestureRecognizer:lpgr];
//    [lpgr release];
//    
    
//end long press try
    
    return vuln;
}

//chaning the height of the table view cells so that all the data is visable
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //probably a dynamic way to do this but I couldn't figure it out 200 seems to fit all test runs
    return 200;
}

//TODO save contents of cell after long press
- (IBAction)LongPress:(id)sender
{
    pointOnTableView = [sender locationInView:self.tableView];

    [self alertUserOfSave];
    



}

- (void)alertUserOfSave
{
    UIAlertView *message = [[UIAlertView alloc]initWithTitle:@"Save this vulnerability?"
                                                     message:@""
                                                    delegate:self
                                           cancelButtonTitle:@"Cancel"
                                           otherButtonTitles:@"OK", nil];
    [message show];

}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    NSString *title = [alertView buttonTitleAtIndex:buttonIndex];
    
    if([title isEqualToString:@"Cancel"])
    {
        NSLog(@"Cancel was selected.");
    }
    else if([title isEqualToString:@"OK"])
    {
        //get location in view
        CGPoint point = pointOnTableView;
        
        //get indexpath so we can get info from cell
        NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:point];
        
        if (indexPath == nil)
        {
            NSLog(@"long press on table view but not on a row");
        }
        else
        {
            UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];
            
            if (cell.isHighlighted)
            {
                //            NSLog(@"long press on table view at section %ld row %ld", (long)indexPath.section, (long)indexPath.row);
                
                NSString* vulnerabiltyInfo = [NSString stringWithFormat:@"%@ %@",
                                              cell.textLabel.text,
                                              cell.detailTextLabel.text];
                NSLog(@"%@", vulnerabiltyInfo);
                
                
            }
        }

    }
}
@end
