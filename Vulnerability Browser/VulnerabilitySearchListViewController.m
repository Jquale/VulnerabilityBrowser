//
//  VulnerabilitySearchListViewController.m
//  Vulnerability Browser
//
//  Created by twslezak on 11/19/14.
//  Copyright (c) 2014 Quale, Slezak. All rights reserved.
//

#import "VulnerabilitySearchListViewController.h"
#import "VulnerabilityObject.h"
#import <Parse/Parse.h>

@interface VulnerabilitySearchListViewController ()
@property (weak, nonatomic) IBOutlet UITableView *tableView;
@property NSString* vulnerabilityString;
@property NSString* vulnerabilityCVE;
@property NSString* vulnerabilityDetail;

@end

@implementation VulnerabilitySearchListViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    if (self.vulnerabilityResults.count == 0)
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"No results found"
                                                        message:@"Please try searching again."
                                                       delegate:nil
                                              cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
        [alert show];
    }
    [self loadTable];
    
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
 #pragma mark - Navigation
 
 // In a storyboard-based application, you will often want to do a little preparation before navigation
 - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 // Get the new view controller using [segue destinationViewController].
 // Pass the selected object to the new view controller.
 }
 */

-(void)loadTable
{
    NSMutableArray *newIndexPaths = [NSMutableArray new];
    for(int i=0; i<self.vulnerabilityResults.count; i++)
    {
        [newIndexPaths addObject:[NSIndexPath indexPathForRow:i inSection:0]];
    }
    //        NSLog(@"numberOfRowsInSection: %ld", (long)[self tableView:self.tableView numberOfRowsInSection:0]);
    [self.tableView insertRowsAtIndexPaths:newIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];
    
    
}

- (IBAction)LongPress:(UILongPressGestureRecognizer *)sender
{
    //stop running twice!
    if ( sender.state != UIGestureRecognizerStateBegan )
        return;
    //get location in view
    CGPoint point = [sender locationInView:self.tableView];
    //get indexpath so we can get info from cell
    NSIndexPath *indexPath = [self.tableView indexPathForRowAtPoint:point];
    if (indexPath == nil)
    {
        NSLog(@"long press on table view but not on a row");
    }
    else
    {
        UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:indexPath];
        if (cell.isHighlighted)
        {
            self.vulnerabilityCVE = cell.textLabel.text;
            self.vulnerabilityDetail = cell.detailTextLabel.text;
            NSString* vulnerabiltyInfo = [NSString stringWithFormat:@"%@ %@",
                                          cell.textLabel.text,
                                          cell.detailTextLabel.text];
            //set string to property so we can push it to parse
            self.vulnerabilityString = vulnerabiltyInfo;
            //this will alert user of save and will save unless user taps cancel
            [self alertUserOfSave];
        }
    }
}
//produce alert
- (void)alertUserOfSave
{
    UIAlertView *message = [[UIAlertView alloc]initWithTitle:@"Save this vulnerability?"
                                                     message:@""
                                                    delegate:self
                                           cancelButtonTitle:@"Cancel"
                                           otherButtonTitles:@"OK", nil];
    [message show];
}
//handle button click on alert
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    NSString *title = [alertView buttonTitleAtIndex:buttonIndex];
    if([title isEqualToString:@"Cancel"])
    {
        // NSLog(@"Cancel was selected.");
    }
    //push vulnerability info to parse if they want to save
    else if([title isEqualToString:@"OK"])
    {
        // NSLog(@"%@", self.vulnerabilityString);
        [self saveVulnToParse];
    }
}
//TODO ask the great Slezak about parse information
- (void)saveVulnToParse
{
    //TODO get parse's current user then save vulnerbility with username
    PFUser* currentUser = [PFUser currentUser];
    PFObject* pf_object = [PFObject objectWithClassName:@"SavedVuln"];
    pf_object[@"vulnerabilty"] = self.vulnerabilityString;
    pf_object[@"vulnerabilityCVE"] = self.vulnerabilityCVE;
    pf_object[@"vulnerabilityDetail"] = self.vulnerabilityDetail;
    pf_object[@"parseUsername"] = currentUser.username;
    [pf_object saveInBackground];
}

#pragma mark - TableViewDelegation

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.vulnerabilityResults.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *vuln = [tableView dequeueReusableCellWithIdentifier:@"vuln" forIndexPath:indexPath];
    VulnerabilityObject *vulnerability = self.vulnerabilityResults[indexPath.row];
    vuln.detailTextLabel.lineBreakMode = NSLineBreakByWordWrapping;
    vuln.detailTextLabel.numberOfLines = 0;
    
    vuln.textLabel.text = vulnerability.vulnCveID;
    vuln.detailTextLabel.text = vulnerability.description;
    
    
    return vuln;
    
}

//dyanimcally changing the table view cell size depending on the text
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //probably a dynamic way to do this but I couldn't figure it out 150 seems to fit all test runs
    return 200;
}

@end
