//
//  SavedVulnViewController.m
//  Vulnerability Browser
//
//  Created by twslezak on 11/26/14.
//  Copyright (c) 2014 Quale, Slezak. All rights reserved.
//

#import "SavedVulnViewController.h"
#import "VulnerabilityObject.h"
#import <Parse/Parse.h>

@interface SavedVulnViewController ()
@property NSMutableArray *vulnerabilities;
@property (weak, nonatomic) IBOutlet UITableView *tableView;
@property NSString *vulnToDelete;
@property NSIndexPath *indexToRemove;
@end

@implementation SavedVulnViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.vulnerabilities = [[NSMutableArray alloc] init];
    [self getSavedVulnerabilities];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)getSavedVulnerabilities
{
    PFUser *currentUser = [PFUser currentUser];
    PFQuery *query = [PFQuery queryWithClassName:@"SavedVuln"];
    [query whereKey:@"parseUsername" equalTo:currentUser.username];
    
    query.limit = 1000;
    
    [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
        if (!error) {
            // The find succeeded.
            //NSLog(@"Successfully retrieved %d queries.", objects.count);
            // Do something with the found objects
            for (PFObject *object in objects) {
                //NSLog(@"%@", object.objectId);
                
                //creating the object
                NSString *parseVulnName = object[@"vulnerabilityCVE"];
                NSString *parseVulnSummary = object[@"vulnerabilityDetail"];
                
                VulnerabilityObject *parseVulnerability = [[VulnerabilityObject alloc]initWithDataFromParse:parseVulnName
                                                                                                   vulnDate:nil
                                                                                                  vulnScore:nil
                                                                                                vulnSummary:parseVulnSummary];
                //adding the object to our array of vulnerabilities
                [self.vulnerabilities addObject:parseVulnerability];
                
                
            }
        }
        else
        {
            // Log details of the failure
            NSLog(@"Error: %@ %@", error, [error userInfo]);
        }
        
        //creating an array to put the objects in the tableView
        NSMutableArray *newIndexPaths = [NSMutableArray new];
        for(int i=0; i<self.vulnerabilities.count; i++)
        {
            [newIndexPaths addObject:[NSIndexPath indexPathForRow:i inSection:0]];
        }
        //        NSLog(@"numberOfRowsInSection: %ld", (long)[self tableView:self.tableView numberOfRowsInSection:0]);
        [self.tableView insertRowsAtIndexPaths:newIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];
    }];

}

#pragma mark - TableViewDelegation

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.vulnerabilities.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *vuln = [tableView dequeueReusableCellWithIdentifier:@"vuln" forIndexPath:indexPath];
    VulnerabilityObject *vulnerability = self.vulnerabilities[indexPath.row];
    vuln.detailTextLabel.lineBreakMode = NSLineBreakByWordWrapping;
    vuln.detailTextLabel.numberOfLines = 0;
    
    vuln.textLabel.text = vulnerability.vulnCveID;
    vuln.detailTextLabel.text = vulnerability.vulnSummary;
    
    
    return vuln;
    
}

//dyanimcally changing the table view cell size depending on the text
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //probably a dynamic way to do this but I couldn't figure it out 150 seems to fit all test runs
    return 200;
}


- (IBAction)LongPress:(UILongPressGestureRecognizer *)sender
{
    //stop running twice!
    if ( sender.state != UIGestureRecognizerStateBegan )
        return;
    //get location in view
    CGPoint point = [sender locationInView:self.tableView];
    //get indexpath so we can get info from cell
    self.indexToRemove = [self.tableView indexPathForRowAtPoint:point];
    if (self.indexToRemove == nil)
    {
        NSLog(@"long press on table view but not on a row");
    }
    else
    {
        UITableViewCell *cell = [self.tableView cellForRowAtIndexPath:self.indexToRemove];
        if (cell.isHighlighted)
        {
            self.vulnToDelete = cell.textLabel.text;

        
            //this will alert user of delete and will save unless user taps cancel
            [self alertUserOfDelete];
        }
    }
}
//produce alert
- (void)alertUserOfDelete
{
    UIAlertView *message = [[UIAlertView alloc]initWithTitle:@"Delete this vulnerability?"
                                                     message:@""
                                                    delegate:self
                                           cancelButtonTitle:@"Cancel"
                                           otherButtonTitles:@"OK", nil];
    [message show];
}
//handle button click on alert
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    NSString *title = [alertView buttonTitleAtIndex:buttonIndex];
    if([title isEqualToString:@"Cancel"])
    {
        // NSLog(@"Cancel was selected.");
    }
    //push vulnerability info to parse if they want to save
    else if([title isEqualToString:@"OK"])
    {
        [self.vulnerabilities removeObjectAtIndex:self.indexToRemove.row];
        [self.tableView beginUpdates];
        [self.tableView deleteRowsAtIndexPaths:@[self.indexToRemove] withRowAnimation:UITableViewRowAnimationAutomatic];
        [self.tableView endUpdates];
        // NSLog(@"%@", self.vulnerabilityString);
        [self deleteVulnFromParse];
    }
}

- (void)deleteVulnFromParse
{
    PFUser *currentUser = [PFUser currentUser];
    PFQuery *query = [PFQuery queryWithClassName:@"SavedVuln"];
    [query whereKey:@"parseUsername" equalTo:currentUser.username];
    [query whereKey:@"vulnerabilityCVE" equalTo:self.vulnToDelete];
    
    query.limit = 1000;
    
    [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
        if (!error) {
            // The find succeeded.
            //NSLog(@"Successfully retrieved %d queries.", objects.count);
            // Do something with the found objects
            for (PFObject *object in objects) {
                //NSLog(@"%@", object.objectId);
                
                [object deleteInBackground];
                
                
            }
        }
        else
        {
            // Log details of the failure
            NSLog(@"Error: %@ %@", error, [error userInfo]);
        }
    }];
}
@end

