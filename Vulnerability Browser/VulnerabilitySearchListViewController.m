//
//  VulnerabilitySearchListViewController.m
//  Vulnerability Browser
//
//  Created by twslezak on 11/19/14.
//  Copyright (c) 2014 Quale, Slezak. All rights reserved.
//

#import "VulnerabilitySearchListViewController.h"
#import "VulnerabilityObject.h"

@interface VulnerabilitySearchListViewController ()
@property (weak, nonatomic) IBOutlet UITableView *tableView;
@end

@implementation VulnerabilitySearchListViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    [self loadTable];

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

-(void)loadTable
{
    NSMutableArray *newIndexPaths = [NSMutableArray new];
    for(int i=0; i<self.vulnerabilityResults.count; i++)
    {
        [newIndexPaths addObject:[NSIndexPath indexPathForRow:i inSection:0]];
    }
    //        NSLog(@"numberOfRowsInSection: %ld", (long)[self tableView:self.tableView numberOfRowsInSection:0]);
    [self.tableView insertRowsAtIndexPaths:newIndexPaths withRowAnimation:UITableViewRowAnimationAutomatic];

    
}

#pragma mark - TableViewDelegation

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.vulnerabilityResults.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *vuln = [tableView dequeueReusableCellWithIdentifier:@"vuln" forIndexPath:indexPath];
    VulnerabilityObject *vulnerability = self.vulnerabilityResults[indexPath.row];
    vuln.detailTextLabel.lineBreakMode = NSLineBreakByWordWrapping;
    vuln.detailTextLabel.numberOfLines = 0;
    
    vuln.textLabel.text = vulnerability.vulnCveID;
    vuln.detailTextLabel.text = vulnerability.description;
    
    
    return vuln;
    
}

//dyanimcally changing the table view cell size depending on the text
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    //probably a dynamic way to do this but I couldn't figure it out 150 seems to fit all test runs
    return 200;
}

@end
