//
//  SortingPickerTableTableViewController.m
//  Vulnerability Browser
//
//  Created by Joseph North on 11/9/14.
//  Copyright (c) 2014 Quale, Slezak. All rights reserved.
//

#import "SortingPickerTableViewController.h"

@interface SortingPickerTableViewController ()

@end

@implementation SortingPickerTableViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
    
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
}

- (id)initWithStyle:(UITableViewStyle)style {
    if ([super initWithStyle:style] != nil) {
        _sortingTypes = [NSMutableArray array];
        
        // Allow sorting by CVE or date in increasing or decreasing order.
        [_sortingTypes addObject:@"Lowest CVE"];
        [_sortingTypes addObject:@"Highest CVE"];
        [_sortingTypes addObject:@"Newest"];
        [_sortingTypes addObject:@"Oldest"];
        
        // Preserve selection between presentations.
        self.clearsSelectionOnViewWillAppear = NO;
        
        CGFloat labelHeight = 0;
        CGFloat largestLabelWidth = 0;
        for (NSString * sortingType in _sortingTypes) {
            // Get the size of the text using a bold, size 20 font.
            CGSize labelSize = [sortingType sizeWithAttributes:@{NSFontAttributeName: [UIFont boldSystemFontOfSize:20.0f]}];
            // Find the width of the largest label.
            if (labelSize.width > largestLabelWidth) {
                largestLabelWidth = labelSize.width;
            }
            // Find the height of a label (should be the same for all the labels).
            if (labelHeight == 0) {
                labelHeight = labelSize.height;
            }
        }
        // Add 20 units of padding for the label height.
        self.tableView.rowHeight = labelHeight + 20;
        // Add 40 units of padding for the label width, and make the preferred height of the popover equal to 4 times the row height determined earlier since there are 4 entries.
        self.preferredContentSize = CGSizeMake(largestLabelWidth + 40, 4 * self.tableView.rowHeight);
    }
    
    return self;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [_sortingTypes count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SortingCell"];
    // Instantiate a cell if there isn't one to reuse.
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"SortingCell"];
    }
    // Set the text label's font to the one we used to determine the size.
    cell.textLabel.font = [UIFont boldSystemFontOfSize:20.0f];
    cell.textLabel.text = [_sortingTypes objectAtIndex:indexPath.row];
    
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    NSString *selectedSortingType = [_sortingTypes objectAtIndex:indexPath.row];
    // If the delegate has been set, notify the delegate that a selection has been made.
    if (_delegate != nil) {
        [_delegate selectedSortingType:selectedSortingType];
    }
}

@end
